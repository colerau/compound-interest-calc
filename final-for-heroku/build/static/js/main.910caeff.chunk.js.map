{"version":3,"sources":["helpers/numberWithCommas.js","components/CompInterestForm.js","components/AmortizationSchedule.js","components/AmortizationForm.js","App.js","reportWebVitals.js","index.js"],"names":["numberWithCommas","x","toString","replace","CompInterestForm","props","useState","startingAmount","setStartingAmount","interestRate","setInterestRate","numYears","setNumYears","interval","setInterval","getFinalAmount","finalAmount","name","content","className","type","size","maxLength","value","onChange","e","target","toFixed","AmortizationSchedule","loanAmount","monthlyPayment","correctedInterestRate","twoDecimals","num","Number","parseFloat","id","roundedInterest","roundedPrincipal","object","roundedMonthlyPayment","balance","roundedBalance","arrayOfObjects","i","paymentNumber","paymentAmount","push","map","obj","createSched","AmortizationForm","setLoanAmount","numMonths","App","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.910caeff.chunk.js","sourcesContent":["const numberWithCommas = x => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport default numberWithCommas","import React from 'react'\nimport { useState } from 'react'\nimport numberWithCommas from '../helpers/numberWithCommas.js'\n\nconst CompInterestForm = props => {\n\n  const [startingAmount, setStartingAmount] = useState(\"\")\n  const [interestRate, setInterestRate] = useState(\"\")\n  const [numYears, setNumYears] = useState(\"\")\n  const [interval, setInterval] = useState(\"yearly\")\n\n  const getFinalAmount = () => {\n    let finalAmount = 0\n    if (startingAmount && interestRate && numYears && interval) {\n      if (interval === \"yearly\") {\n        finalAmount = (startingAmount * (1 + (interestRate * .01))**numYears)\n      } else {\n        finalAmount = (startingAmount * (1 + ((interestRate * .01) / 12))**(12 * numYears))\n      }\n    }\n    return finalAmount\n  }\n\n  return (\n    <div>\n      <title>\n        Compound Interest Calculator\n      </title>\n\n      <meta name=\"Description\" content=\"Calculate the compound interest\" />\n\n      <h1 className=\"cool-font\">Compound Interest Calculator</h1>\n      <form>\n          <label className=\"cool-font\">\n            Starting amount:&nbsp;$\n            <input className=\"cool-font\" type=\"text\" size=\"19\" maxLength=\"18\" value={startingAmount} onChange={(e) => setStartingAmount(e.target.value)} />\n          </label>\n          <br />\n          <br />\n          <label className=\"cool-font\">\n            Interest rate:&nbsp;\n            <input className=\"cool-font\" type=\"text\" size=\"6\" maxLength=\"6\" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} />\n            %\n          </label>\n          <br />\n          <br />\n          <label className=\"cool-font\">\n            Number of years:&nbsp;\n            <input className=\"cool-font\" type=\"text\" size=\"2\" maxLength=\"2\" value={numYears} onChange={(e) => setNumYears(e.target.value)} />\n          </label>\n          <br />\n          <br />\n          <label className=\"cool-font\">\n            Compounding interval:&nbsp;\n            <select className=\"cool-font\" value={interval} onChange={(e) => setInterval(e.target.value)}>\n              <option className=\"cool-font\" value=\"yearly\">yearly</option>\n              <option className=\"cool-font\" value=\"monthly\">monthly</option>\n            </select>\n          </label>\n      </form>\n      \n      {getFinalAmount() ? \n        <>\n        <br />\n        <br />\n\n        <div className=\"cool-font\">\n          <h2>\n            If <strong>${numberWithCommas(startingAmount)}</strong> \n            &nbsp;were compounded <strong>{interval}</strong> at <strong>{interestRate}%</strong> for <strong>{numberWithCommas(numYears)}</strong> \n            &nbsp;{numYears === \"1\" ? \"year\" : \"years\"}, you would have...\n          </h2>\n        </div>\n    \n        <h1 className=\"cool-big-font\">{`$${numberWithCommas(getFinalAmount().toFixed(2))}`}</h1>\n\n        <div className=\"cool-font\">\n          <h2>That's an increase of&nbsp;\n            <strong>${numberWithCommas((getFinalAmount() - startingAmount).toFixed(2))}</strong>\n          </h2>\n        </div>\n        </>\n        : \n        <></>\n      }\n    </div>\n  )\n}\n\nexport default CompInterestForm","import React from \"react\"\nimport numberWithCommas from '../helpers/numberWithCommas.js'\n\nconst AmortizationSchedule = props => {\n  let {loanAmount, interestRate, numYears, monthlyPayment} = props\n\n  // need to get interest rate per month as a decimal\n  let correctedInterestRate = interestRate / 12 * 0.01\n\n  // rounding function\n  const twoDecimals = num => {\n    return Number.parseFloat(num).toFixed(2)\n  }\n\n  const createSched = (loanAmount, correctedInterestRate, numYears, monthlyPayment) => {\n    let roundedMonthlyPayment = twoDecimals(monthlyPayment)\n\n    let balance = loanAmount\n    let roundedBalance = twoDecimals(balance)\n\n    let interest\n    let roundedInterest\n\n    let principal\n    let roundedPrincipal\n\n    let finalPaymentAmount\n\n    let arrayOfObjects = []\n\n    let object\n\n  \n    for (let i = 1; i <= (numYears * 12) - 1; i++) {\n      interest = roundedBalance * correctedInterestRate\n      roundedInterest = twoDecimals(interest)\n\n      principal = roundedMonthlyPayment - roundedInterest\n      roundedPrincipal = twoDecimals(principal)\n\n      balance = balance - roundedPrincipal\n      roundedBalance = twoDecimals(balance)\n\n      object = {\n        paymentNumber: i,\n        paymentAmount: roundedMonthlyPayment,\n        roundedInterest: roundedInterest,\n        roundedPrincipal: roundedPrincipal,\n        roundedBalance: roundedBalance\n      }\n\n      arrayOfObjects.push(object)\n\n    }\n\n    // get final interest\n    interest = roundedBalance * correctedInterestRate\n    roundedInterest = twoDecimals(interest)\n\n    // get final principal\n    principal = roundedBalance\n    roundedPrincipal = twoDecimals(principal)\n\n    // get final payment amount\n    finalPaymentAmount = twoDecimals(Number.parseFloat(roundedPrincipal) + Number.parseFloat(roundedInterest))\n\n    // update rounded balance\n    roundedBalance = roundedBalance - roundedPrincipal\n\n    object = {\n      paymentNumber: numYears * 12,\n      paymentAmount: finalPaymentAmount,\n      roundedInterest: roundedInterest,\n      roundedPrincipal: roundedPrincipal,\n      roundedBalance: twoDecimals(roundedBalance)\n    }\n\n    arrayOfObjects.push(object)\n\n    return arrayOfObjects.map((obj, paymentNumber) => {\n      return (\n        <tr key={paymentNumber}>\n          <td>{numberWithCommas(obj.paymentNumber)}</td>\n          <td>${numberWithCommas(obj.paymentAmount)}</td>\n          <td>${numberWithCommas(obj.roundedInterest)}</td>\n          <td>${numberWithCommas(obj.roundedPrincipal)}</td>\n          <td>${numberWithCommas(obj.roundedBalance)}</td>\n        </tr>\n      )\n    })\n  }\n\n  return (\n    <>\n      <h1 className=\"cool-font\">Amortization Schedule</h1>\n        <table id=\"amor-table\">\n          <tbody>\n            <tr>\n              <th>Payment No.</th>\n              <th>Payment Amount</th>\n              <th>Interest</th>\n              <th>Principal</th>\n              <th>Loan Remaining</th>\n            </tr>\n            {createSched(loanAmount, correctedInterestRate, numYears, monthlyPayment)}\n          </tbody>\n        </table>\n    </>\n  )\n} \n\nexport default AmortizationSchedule","import React from \"react\"\nimport { useState } from \"react\"\nimport AmortizationSchedule from \"./AmortizationSchedule.js\"\nimport numberWithCommas from '../helpers/numberWithCommas.js'\n\nconst AmortizationForm = props => {\n\n  const [loanAmount, setLoanAmount] = useState(\"\")\n  const [interestRate, setInterestRate] = useState(\"\")\n  const [numYears, setNumYears] = useState(\"\")\n\n  const getFinalAmount = () => {\n    let finalAmount = 0\n    // need to get interest rate per month as a decimal\n    let correctedInterestRate = interestRate / 12 * 0.01\n    let numMonths = numYears * 12\n\n    if (loanAmount && interestRate && numYears) {\n      finalAmount = loanAmount * (correctedInterestRate * (1 + correctedInterestRate)**numMonths) / ((1 + correctedInterestRate)**numMonths - 1)\n    }\n    return finalAmount\n  }\n\n  return (\n    <div>\n      <title>\n        Amortization Calculator\n      </title>\n\n      <meta name=\"Description\" content=\"Generate an amortization schedule\" />\n\n      <h1 className=\"cool-font\">Amortization Calculator</h1>\n      <form>\n        <label className=\"cool-font\">\n          Loan amount:&nbsp;$\n          <input className=\"cool-font\" type=\"text\" size=\"19\" maxLength=\"18\" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} />\n        </label>\n        <br />\n        <br />\n        <label className=\"cool-font\">\n          Interest rate:&nbsp;\n          <input className=\"cool-font\" type=\"text\" size=\"6\" maxLength=\"6\" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} />\n          %\n        </label>\n        <br />\n        <br />\n        <label className=\"cool-font\">\n          Number of years:&nbsp;\n          <input className=\"cool-font\" type=\"text\" size=\"2\" maxLength=\"2\" value={numYears} onChange={(e) => setNumYears(e.target.value)} />\n        </label>\n      </form>\n      \n      {getFinalAmount() ? \n        <>\n        <br />\n        <br />\n\n        <div className=\"cool-font\">\n          <h2>\n            For a <span className=\"orange\">{numYears}</span> year&nbsp;<span className=\"orange\">${numberWithCommas(loanAmount)}</span> \n            &nbsp;loan with a <span className=\"orange\">{interestRate}%</span> interest rate, your fixed monthly payment would be...\n          </h2>\n        </div>\n    \n        {/* display and format final amount */}\n        <h1 className=\"cool-big-font\"><span className=\"orange\">{`$${numberWithCommas(Number.parseFloat(getFinalAmount()).toFixed(2))}`}</span></h1>\n\n        <br />\n        <br />\n        <br />\n\n        {\n        <AmortizationSchedule loanAmount={loanAmount} interestRate={interestRate} numYears={numYears} monthlyPayment={getFinalAmount()} />\n        }\n        </>\n        : \n        <></>\n      }\n    </div>\n  )\n}\n\nexport default AmortizationForm","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CompInterestForm from './components/CompInterestForm.js'\nimport AmortizationForm from './components/AmortizationForm.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <title>\n        Compound Interest and Amortization Calculator\n      </title>\n\n      <meta name=\"Description\" content=\"Calculate the compound interest accrued on an investment. Or generate an amortization schedule.\" />\n\n      <Router>\n        <div>\n          <div className=\"navBarLinks\">\n            <Link to=\"/\">Compound Interest Calculator</Link>\n            <br />\n            <Link to=\"/amortization-calculator\">Amortization Calculator</Link>\n            <hr />\n          </div>\n\n          <Switch>\n            <Route exact path=\"/\">\n              <CompInterestForm />\n            </Route>\n            <Route path=\"/amortization-calculator\">\n              <AmortizationForm />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}